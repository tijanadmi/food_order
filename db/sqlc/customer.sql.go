// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customer.sql

package db

import (
	"context"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO Customers (
    Email,
    Name,
    Street,
    PostalCode,
    City,
    PhoneNumber,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, DEFAULT, DEFAULT
) RETURNING customerid, email, name, street, postalcode, city, phonenumber, created_at, updated_at
`

type CreateCustomerParams struct {
	Email       string `json:"email"`
	Name        string `json:"name"`
	Street      string `json:"street"`
	Postalcode  string `json:"postalcode"`
	City        string `json:"city"`
	Phonenumber string `json:"phonenumber"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.Email,
		arg.Name,
		arg.Street,
		arg.Postalcode,
		arg.City,
		arg.Phonenumber,
	)
	var i Customer
	err := row.Scan(
		&i.Customerid,
		&i.Email,
		&i.Name,
		&i.Street,
		&i.Postalcode,
		&i.City,
		&i.Phonenumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM Customers
WHERE CustomerID = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, customerid int32) error {
	_, err := q.db.Exec(ctx, deleteCustomer, customerid)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT customerid, email, name, street, postalcode, city, phonenumber, created_at, updated_at FROM Customers
WHERE CustomerID = $1
LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, customerid int32) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, customerid)
	var i Customer
	err := row.Scan(
		&i.Customerid,
		&i.Email,
		&i.Name,
		&i.Street,
		&i.Postalcode,
		&i.City,
		&i.Phonenumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerByEmail = `-- name: GetCustomerByEmail :one
SELECT customerid, email, name, street, postalcode, city, phonenumber, created_at, updated_at FROM Customers
WHERE Email = $1
LIMIT 1
`

func (q *Queries) GetCustomerByEmail(ctx context.Context, email string) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByEmail, email)
	var i Customer
	err := row.Scan(
		&i.Customerid,
		&i.Email,
		&i.Name,
		&i.Street,
		&i.Postalcode,
		&i.City,
		&i.Phonenumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT customerid, email, name, street, postalcode, city, phonenumber, created_at, updated_at FROM Customers
ORDER BY CustomerID
`

func (q *Queries) ListCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.Customerid,
			&i.Email,
			&i.Name,
			&i.Street,
			&i.Postalcode,
			&i.City,
			&i.Phonenumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE Customers
SET
    Email = COALESCE($1, Email),
    Name = COALESCE($2, Name),
    Street = COALESCE($3, Street),
    PostalCode = COALESCE($4, PostalCode),
    City = COALESCE($5, City),
    PhoneNumber = COALESCE($6, PhoneNumber),
    updated_at = now()
WHERE
    CustomerID = $7
RETURNING customerid, email, name, street, postalcode, city, phonenumber, created_at, updated_at
`

type UpdateCustomerParams struct {
	Email       string `json:"email"`
	Name        string `json:"name"`
	Street      string `json:"street"`
	Postalcode  string `json:"postalcode"`
	City        string `json:"city"`
	Phonenumber string `json:"phonenumber"`
	Customerid  int32  `json:"customerid"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomer,
		arg.Email,
		arg.Name,
		arg.Street,
		arg.Postalcode,
		arg.City,
		arg.Phonenumber,
		arg.Customerid,
	)
	var i Customer
	err := row.Scan(
		&i.Customerid,
		&i.Email,
		&i.Name,
		&i.Street,
		&i.Postalcode,
		&i.City,
		&i.Phonenumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
