// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: meal.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMeal = `-- name: CreateMeal :one
INSERT INTO Meals (
    Name,
    Description,
    Price,
    Category,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, DEFAULT, DEFAULT
) RETURNING mealid, name, description, price, category, created_at, updated_at
`

type CreateMealParams struct {
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Price       pgtype.Numeric `json:"price"`
	Category    string         `json:"category"`
}

func (q *Queries) CreateMeal(ctx context.Context, arg CreateMealParams) (Meal, error) {
	row := q.db.QueryRow(ctx, createMeal,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Category,
	)
	var i Meal
	err := row.Scan(
		&i.Mealid,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMeal = `-- name: DeleteMeal :exec
DELETE FROM Meals
WHERE MealID = $1
`

func (q *Queries) DeleteMeal(ctx context.Context, mealid int32) error {
	_, err := q.db.Exec(ctx, deleteMeal, mealid)
	return err
}

const getMeal = `-- name: GetMeal :one
SELECT mealid, name, description, price, category, created_at, updated_at FROM Meals
WHERE MealID = $1
LIMIT 1
`

func (q *Queries) GetMeal(ctx context.Context, mealid int32) (Meal, error) {
	row := q.db.QueryRow(ctx, getMeal, mealid)
	var i Meal
	err := row.Scan(
		&i.Mealid,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMealForUpdate = `-- name: GetMealForUpdate :one
SELECT mealid, name, description, price, category, created_at, updated_at FROM Meals
WHERE MealID = $1
LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetMealForUpdate(ctx context.Context, mealid int32) (Meal, error) {
	row := q.db.QueryRow(ctx, getMealForUpdate, mealid)
	var i Meal
	err := row.Scan(
		&i.Mealid,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMealsByCategory = `-- name: GetMealsByCategory :many
SELECT mealid, name, description, price, category, created_at, updated_at FROM Meals
WHERE Category = $1
ORDER BY MealID
`

func (q *Queries) GetMealsByCategory(ctx context.Context, category string) ([]Meal, error) {
	rows, err := q.db.Query(ctx, getMealsByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Meal{}
	for rows.Next() {
		var i Meal
		if err := rows.Scan(
			&i.Mealid,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMeals = `-- name: ListMeals :many
SELECT mealid, name, description, price, category, created_at, updated_at FROM Meals
ORDER BY MealID
`

func (q *Queries) ListMeals(ctx context.Context) ([]Meal, error) {
	rows, err := q.db.Query(ctx, listMeals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Meal{}
	for rows.Next() {
		var i Meal
		if err := rows.Scan(
			&i.Mealid,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMeal = `-- name: UpdateMeal :one
UPDATE Meals
SET
    Name = COALESCE($1, Name),
    Description = COALESCE($2, Description),
    Price = COALESCE($3, Price),
    Category = COALESCE($4, Category),
    updated_at = now()
WHERE
    MealID = $5
RETURNING mealid, name, description, price, category, created_at, updated_at
`

type UpdateMealParams struct {
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Price       pgtype.Numeric `json:"price"`
	Category    string         `json:"category"`
	Mealid      int32          `json:"mealid"`
}

func (q *Queries) UpdateMeal(ctx context.Context, arg UpdateMealParams) (Meal, error) {
	row := q.db.QueryRow(ctx, updateMeal,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Category,
		arg.Mealid,
	)
	var i Meal
	err := row.Scan(
		&i.Mealid,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
